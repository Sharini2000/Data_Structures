MERGE-SORT(A,p,r) // where A is the array, p - is the index of first element and r is the index of last element
    if p < r
        q = floor((p+r)/2)
        MERGE-SORT(A,p,q) ----> Recursive usage. Note we use p and q here. Denoting first half of the array.
        MERGE-SORT(A, q+1, r) ---> Recursive usage. Note we use q+1 and r here. Next half of the array.
        MERGE(A,p,q,r)

MERGE(A,p,q,r)
    n1 = q-p + 1 ---> Size of the first half of array
    n2 = r - q ---> Size of the next hald of the array
    // Create arrays L and R with L[1...n1 + 1] AND R[1.....n2 +1]

    for i = 1 to n1
        do L[i] = A[p+q -1]   /// Copying first half of array A to array L
    for j = 1 to n2 
        do R[j] = A[q+j] /// Copying the next half of array A to array R 
    
    L[n1 + 1] = infinity
    L[n2 + 1] = infinity

    for k = p to r 
        do if L[i] <= R[j]
            then A[k] = L[i]
                i = i + 1
            else A[k] = R[j]
                j = j+1

=====================================================

def merge(arr, left, mid, right):
    n1 = mid - left + 1
    n2 = right - mid

    # Create temp arrays
    L = [0] * n1
    R = [0] * n2

    # Copy data to temp arrays L[] and R[]
    for i in range(n1):
        L[i] = arr[left + i]
    for j in range(n2):
        R[j] = arr[mid + 1 + j]
        
    i = 0  
    j = 0  
    k = left  

    # Merge the temp arrays back
    # into arr[left..right]
    while i < n1 and j < n2:
        if L[i] <= R[j]:
            arr[k] = L[i]
            i += 1
        else:
            arr[k] = R[j]
            j += 1
        k += 1

    # Copy the remaining elements of L[],
    # if there are any
    while i < n1:
        arr[k] = L[i]
        i += 1
        k += 1

    # Copy the remaining elements of R[], 
    # if there are any
    while j < n2:
        arr[k] = R[j]
        j += 1
        k += 1

def mergeSort(arr, left, right):
    if left < right:
        mid = (left + right) // 2

        mergeSort(arr, left, mid)
        mergeSort(arr, mid + 1, right)
        merge(arr, left, mid, right)

# Driver code
if __name__ == "__main__":
    arr = [38, 27, 43, 10]
   
    mergeSort(arr, 0, len(arr) - 1)
    for i in arr:
        print(i, end=" ")
    print()